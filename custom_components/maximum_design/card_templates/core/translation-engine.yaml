---
translation_engine:
  variables:
    translation_back: "[[[ return hass.resources[hass['language']]['ui.common.back']; ]]]"
    translation_brightness: "[[[ return hass.resources[hass['language']]['ui.card.light.brightness']; ]]]"
    translation_color_temperature: "[[[ return hass.resources[hass['language']]['ui.card.light.color_temperature']; ]]]"
    translation_status: "[[[ return hass.resources[hass['language']]['ui.dialogs.more_info_control.vacuum.status']; ]]]"
    translation_scenes: "[[[ return hass.resources[hass['language']]['ui.dialogs.quick-bar.commands.reload.scene']; ]]]"
    translation_source: "[[[ return hass.resources[hass['language']]['ui.card.media_player.source']; ]]]"
    translation_history: "[[[ return hass.resources[hass['language']]['ui.dialogs.more_info_control.history']; ]]]"
    translation_close_cover: "[[[ return hass.resources[hass['language']]['ui.dialogs.more_info_control.cover.close_cover']; ]]]"
    translation_stop_cover: "[[[ return hass.resources[hass['language']]['ui.dialogs.more_info_control.cover.stop_cover']; ]]]"
    translation_open_cover: "[[[ return hass.resources[hass['language']]['ui.dialogs.more_info_control.cover.open_cover']; ]]]"
    translation_more_options: "[[[ return hass.resources[hass['language']]['ui.panel.lovelace.editor.edit_card.options']; ]]]"
    active_state: >
      [[[
        if (typeof(entity) !== 'undefined' && entity !== undefined){
          let not_active = ['disarmed','off','closed','not_home','standby','idle','docked','unknown','unavailable','paused']
          function containsNumbers(str) {
            return /\d/.test(str);
          }
          return (!not_active.includes(entity.state) && !containsNumbers(entity.state))
        }
      ]]]
    translation_off: "[[[ return hass.resources[hass['language']]['state.default.off']; ]]]"
    translation_on: "[[[ return hass.resources[hass['language']]['state.default.on']; ]]]"
    translation_state: >
      [[[
        if (typeof(entity) !== 'undefined' && entity !== undefined){
          let device_class = entity.attributes.device_class;
          let lang = hass["language"];
          let action = entity.attributes.hvac_action;
          let domain = entity.entity_id.substr(0, entity.entity_id.indexOf("."));
          let mode =  hass.resources[lang]["state_attributes." + domain + ".hvac_action." + action];
          if(variables.show_last_changed){
            return helpers.relativeTime(entity.last_changed, true)
          }
          if(device_class == 'timestamp'){
            return helpers.relativeTime(entity.state, true)
          }
          if(entity.entity_id.startsWith("climate.")){
            return helpers.localize(entity, entity.attributes.current_temperature) + ' â€¢ ' +
            helpers.localize(entity) + ((entity.state !='off' && mode !== undefined) ? ' (' + mode + ')' : '');
          }
          return helpers.localize(entity)
        }
      ]]]
    translation_state_reverse: >
      [[[
        if (typeof(entity) !== 'undefined' && entity !== undefined){
          let state = entity.state;
          let def = ["unknown", "unavailable"];
          let lang = hass["language"];
          if (state === "on"){
            var translation = hass.resources[lang]["state.default.off"];
          } else if (state === "off"){
            var translation = hass.resources[lang]["state.default.on"];
          }
          if (def.includes(state)) {
            var translation = hass.resources[lang]["state.default." + state ];
          }
          return translation ? translation : state;
        }
      ]]]
    translation_statistics: "[[[ return hass.resources[hass['language']]['ui.components.statistic-picker.statistic']; ]]]"
    translation_unavailable: "[[[ return hass.resources[hass['language']]['state.default.unavailable']; ]]]"
